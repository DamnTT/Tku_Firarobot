#!/usr/bin/env python
PACKAGE = "strategy"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

## Select Role
role_enum = gen.enum([ gen.const("Attacker",  str_t, "Attacker",  "Attacker"),
                       gen.const("Supporter", str_t, "Supporter", "Supporter"),
                       gen.const("Passer",    str_t, "Passer",    "Passer")],
                       "An enum to set Role")
gen.add("role", str_t, 0, "Select Role before game started", "Attacker", edit_method=role_enum)

## Game Start or not
gen.add("game_start",   bool_t,   0, "Game Start or not",  False)
## Chase ball straightly
gen.add("chase_straight",   bool_t,   0, "Chase ball straightly",  False)
gen.add("Accelerate",   bool_t,   0, "Chase ball Accelerated",  False)
gen.add("change_plan", bool_t,  0,  "reatack the ball", False)
gen.add("ball_pwm",   bool_t,   0, "Chase ball with ball's pwm",  False)
gen.add("shooting_start",   bool_t,   0, "start with shooting",  False)
gen.add("Change_Plan",   bool_t,   0, "when stock in the game change plane",  False)
gen.add("locate",   bool_t,   0, "use self_localization operate",  False)

## Select Game State
game_state_enum = gen.enum([ gen.const("Kick_Off",     str_t, "Kick_Off",     "Kick_Off"),
                             gen.const("Free_Kick",    str_t, "Free_Kick",    "Free_Kick"),
                             gen.const("Free_Ball",    str_t, "Free_Ball",    "Free_Ball"),
                             gen.const("Throw_In",     str_t, "Throw_In",     "Throw_In"),
                             gen.const("Coner_Kick",   str_t, "Coner_Kick",   "Coner_Kick"),
                             gen.const("Penalty_Kick", str_t, "Penalty_Kick", "Penalty_Kick")],
                             "An enum to set Game State")
gen.add("game_state", str_t, 0, "Select Game State before game started", "Kick_Off", edit_method=game_state_enum)

## Run Point
side_enum = gen.enum([ gen.const("empty_hand",     str_t, "empty_hand",   "empty_hand"),
                       gen.const("ball_hand",      str_t, "ball_hand",    "ball_hand"),
                       gen.const("none",           str_t, "none",         "none")],
                       "An enum to set run_point State")
gen.add("run_point",   str_t,   0, "Select the situation and run to specific point",  "none", edit_method=side_enum)
gen.add("run_x",   double_t, 0, "Run spec x",   0, -300, 300 )
gen.add("run_y",   double_t, 0, "Run spec y",   0, -200, 200 )
gen.add("run_yaw", double_t, 0, "Run spec ang", 0, -180, 180)

## REMAINING_RANGE_V & REMAINING_RANGE_YAW
# gen.add("remaining_range_v", double_t,   0, "REMAINING_RANGE_V ",  5, 0, 20)
# gen.add("remaining_range_yaw", double_t,   0, "REMAINING_RANGE_YAW ",  2, 0, 10)

## Select Team between Cyan or Magenta
side_enum = gen.enum([ gen.const("Attack_Yellow", str_t, "Blue",   "Attack Yellow Goal"),
                       gen.const("Attack_Blue",   str_t, "Yellow", "Attack Blue Goal")],
                     "An enum to set Team")
gen.add("our_side", str_t, 0, "A side parameter which is edited via an enum", "Yellow", edit_method=side_enum)

## Select Attack Mode
side_enum = gen.enum([ gen.const("Attack",  str_t, "Attack" ,  "Attack"),
                       gen.const("Orbit",  str_t, "Orbit" ,  "Orbit"),
                       gen.const("Cut",  str_t, "Cut" ,  "Cut"),
                       gen.const("Post_up",  str_t, "Post_up" ,  "Post_up"),
                       gen.const("Defense", str_t, "Defense", "Defense")],
                     "An enum to set Attack Mode")
gen.add("attack_mode", str_t, 0, "A side parameter which is edited via an enum", "Attack", edit_method=side_enum)

## Select Strategy Mode
side_enum = gen.enum([ gen.const("At_Orbit",  str_t, "At_Orbit" ,  "At_Orbit"),
                       gen.const("Post_up",  str_t, "At_Post_up" ,  "At_Post_up"),                       
                       gen.const("Defense_ball", str_t, "Defense_ball", "Defense_ball"),
                       gen.const("Defense_goal", str_t, "Defense_goal", "Defense_goal"),
                       gen.const("Fast_break", str_t, "Fast_break", "Fast_break")],
                     "An enum to set Strategy Mode")
gen.add("strategy_mode", str_t, 0, "A side parameter which is edited via an enum", "Fast_break", edit_method=side_enum)

## Orbit_shoot angle
gen.add("orb_attack_ang", double_t,  0, "Condition of shootale ang", 10, 0, 20)

## Attack_shoot angle
gen.add("atk_shoot_ang", double_t,  0, "Condition of shootale ang", 5, 0, 10)
gen.add("atk_shoot_dis", double_t,  0, "Condition of shootale dis", 300, 0, 500)


## Robot Speed
gen.add("minimum_w", double_t,   0, "minimum speed of angular velocity",  0.2, 0, 5)
gen.add("maximum_w", double_t,   0, "Maximum speed of angular velocity",  50, 10, 100)
# gen.add("kp_w", double_t,   0, "Kp value of angular velocity",  0.4, 0, 1)
# gen.add("ki_w", double_t,   0, "Ki value of angular velocity",  0, 0, 1)
# gen.add("kd_w", double_t,   0, "Kd value of angular velocity",  0, 0, 1)

gen.add("minimum_v", double_t,   0, "minimum speed of velocity",  0.2, 0, 5)
gen.add("maximum_v", double_t,   0, "Maximum speed of velocity",  30, 10, 100)
# gen.add("kp_v", double_t,   0, "Kp value of velocity",  0.4, 0, 1)
# gen.add("ki_v", double_t,   0, "Ki value of velocity",  0, 0, 1)
# gen.add("kd_v", double_t,   0, "Kd value of velocity",  0, 0, 1)

## Strategy Configs
gen.add("ballhandle_dis", int_t,   0, "Condition of Handleing ball", 28, 0, 50)
gen.add("ballhandle_ang", int_t,   0, "Condition of Handleing ball", 5, 0, 50)

exit(gen.generate(PACKAGE, "strategy", "Robot"))
